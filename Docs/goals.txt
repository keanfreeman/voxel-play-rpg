CURRENT GOALS
make a new scene and allow the player to transition between the two by walking on a tile.
- hook up player controls to new scene
- create a third scene, switch between the two with a debug key
- learn about how to efficiently load scenes (preserve voxel play environment?, look up scenemanager docs)
- make a nonvoxelworld square which is a loading zone (enter a new state where we wait for the new zone to load)
- preserve some objects / save data between scene loads

have two scenes loaded and quickly switch between them by making them active.
- need to make sure all relevant assets are only created when needed, and are moved when changing scenes
- some things are being created in the scene prematurely, like the player. also, NPCs are active before they should be
- some kind of shared buffer is still being used and rendered to by each environment, I think. some voxels are both a brick and a 
grass.
- need to set all VP objects beneath the scenebuilder as active when I want to display them, otherwise they should be inactive by default.
- still having an issue where if both environments are loading/active at the same time, there is an issue with the background threads. 
need to figure out why that is so they can both initialize.
- did not figure out the problem with the greedy mesher, but found a workaround using a different renderer
- nope, when I try destroying a voxel in one scene, suddenly the stuff rendered in that scene is shared with the other scene somehow. 
Still need to figure this out
- for some reason, if I modify the contents of one environment while the other is rendering, it merges the two.

TODO
Use an Init method (called by Start/Awake) to initialize monobehaviors, like a constructor

create a unified list of voxeldefinitions that all environments must use, so I don't have environments
missing voxels from other environments (except maybe player-added ones)

make more than 3 dialogue options possible with a scrollview that automatically slides when the user's selection is off-screen

pause NPC movement when player not free

add back sprinting, or remove sprinting and add a speed vehicle

add an icon above interactable objects - https://www.youtube.com/watch?v=vY0Sk93YUhA

try to create a custom voxel that encapsulates a 3d object.
- use an existing prefab
- this will make loading/unloading things easier.

make it possible to see through walls when the player is behind it

make it possible to move in any direction with "snapping" to the grid, like fire emblem awakening and pokemon ORAS

animate the player

make slopes occlude their surroundings

add combat

add dialog

add a "detatched mode" like advance wars/divinity, where the sprite stays put and a cursor appears that can move around.
this can look around, build things, select things, etc.
- maybe shouldn't load things past the sprite's vision.

guide the camera in scenarios where it would be nice to do so, like if the player was descending a spiral staircase against a wall

break rotation and movement into its own classes

add shadows to sprites?

think about design of sprites. can I afford to have 4 directions per sprite? Maybe
a side profile + running + attacking is enough
- player can be special. Can have 4 directions for the player classes + potential customizability (hair, armor, etc like fire emblem),
  and NPCs/monsters just have 2 idle sprites and an attack sprite like rift wizard


STYLE IMPROVEMENTS
- dialog box
- 

DISCUSSION
directionality
- the issue with this approach is it requires at least 4 sprites just for being able to stand in a direction.
- it'd be weird if the player had all these animations but the NPCS/monsters did not
- instead, a less resource intensive way might be to have the sprite glide above the terrain, and have an A button
become available when they are close enough to talk. this would reduce the number of sprites needed to 2. One would
be for standing, one would be for walking, and directionality can be achieved with flipping the sprite.
- I think with this interaction system, a movement system that's less coupled to the grid would be ideal, although I could see
a system where the player is still on the grid but must stand next to the NPC to talk working, kind of like early Pokemon.
- a grid-based movement system appeals to my nostalgia and is actually convenient sometimes when navigating terrain, but
a free movement system is more natural.
- decided a left/right profile with a minimal walking animation is the least resource intensive way to do this that still stays
true to the 2d/3d aesthetic and has directionality/movement.

interaction
- interactions will be able to do many things, so it's best to design this generically. Need some way to string together various
behaviors, like dialogue -> move NPC -> forced walk -> show image -> dialogue -> forced walk -> teleport -> show animation -> return control
- I need to implement each capability individually.
- To identify what to do when a player interacts with something, I could tag NPCs/objects with IDs that are associated with a chain
of events.
- I need a place to store the sequence of events. Maybe a tree of Event classes that encapsulates Dialogue, NPC movement, etc would work.
We'd need a tree because events can theoretically branch on player choice, for example Buy vs Sell.
- Eventually, I'll need something more dynamic, for example, choices can loop.
- I could have a SEQUENCE control state to direct what the player's allowed to do


BUGS TO FIX
fix texture issues on slopes

use ondestroy in the bed script to destroy all voxels (including invisible ones) when one is destroyed. Need to know
the rotation and position of the destroyed voxel to properly destroy them all, or maybe the Model information + rotation for 
destruction of generic multi-voxel objects. I also want to be able to place Models that are rotated (e.g. a bed facing east).


MVP FOR FRIEND
- needs to have some fun-looking environments (can use art from this creator - https://assetstore.unity.com/packages/3d/environments/fantasy/retro-dungeons-modular-house-interiors-170705)
	I'm thinking at least a home, a village-y area, and "dungeon" area
- needs to have at least two classes the player can choose from, one martial and one magic
- needs at least two fights
- need to demonstrate somehow that the player can modify the terrain to their liking
- needs an NPC or a monster who joins the player
- needs some dialog that showcases a little story

- should really be playable with a controller
- would be nice if a movement option became available for the player early on (like a bike that can ride around a generated area)
- would be nice to have the player able to customize the look of their character

DONE
give the bed a different dialogue text than the NPCs.
- attach information to the bed voxel perhaps
- store a mapping between objects that are interacted with and the ink file / path that needs to be opened

switch to UI toolkit for the UI

use ink to add choices - https://www.youtube.com/watch?v=vY0Sk93YUhA

switch to new input system
- this will make differentiating between controls in the dialog context vs movement context easier.

get the bed to have its own dialogue

make sprite with directionality (faces a direction)

make sprite capable of interacting with objects with "A"

add a text box for the player to read when interacting with stuff. 
- make it so all control is ceded to the text box when in that state.

add player movement
- need to move the existing camera to above the sprite, and add controls that cause the sprite to move
- the existing camera must be used because it determines what voxels are loaded
- need to be able to switch between hovering above the sprite and walking around in first-person
-

make movement linear (move 1 unit every 0.X seconds, linearly. transform.lerp)

hide the cursor when in top-down mode

create a custom voxel for slopes
- useful for allowing players to travel up or down a level. necessary for interesting levels
- required using unity probuilder to create the mesh

block player movement into spaces occupied by voxels
- need to answer questions: what cube is the sprite occupying? what cube is the sprite entering? is that cube occupied?

need to prevent slope voxel from telling the engine it can occlude the wall

automatically move the player upwards/downwards on slopes
- need to just move them up/down now

restrict movement to grounded movement

allow the camera to move through walls in sprite mode

allow the player to rotate the camera
- current system assumes always facing front

add NPCs
- have my own "move sprite" method that handles moving around the player and NPCs
- make them not move into other creature-occupied tiles or voxel occupied tiles
- have all sprites obey rules of movement, including NPCs (can go up/down slopes)
- fix rotation for NPCs
