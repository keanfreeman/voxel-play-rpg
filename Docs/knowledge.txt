I couldn't figure out what was causing the error that would occur when two environments ran simultaneously (threading, maybe?).
My temporary fix for this is to disable the script for the old environment when switching to a new one, and only enable the 
new one once the old one is done. However, that's not great because I won't get the speed benefit of having a loaded Environment
ready to go.


in order to fix ugly visibility issues with VP camera inside the terrain, can maybe use collision detection with 
the camera (and an invisible object between the camera and the player) to activate custom logic that makes voxels 
visible (even if they are normally not rendered) and changes their opacity.
- https://kronnect.freshdesk.com/support/solutions/articles/42000058885-see-through-occluding-voxels

unfortunately, objects in different scenes are still visible to any camera in any scene. if I want multiple Environments loaded
without overlapping, I need to somehow hide one of them.

there are several objects that voxel play expected only one to exist, including the environment (singleton), 
the chunk manager, the FX particle manager, and the voxel play world object.

in order to take advantage of scenes fully, I need objects that should be in the scene to not be created dynamically.
This is because objects created at runtime are added to the active scene, so I'd either need to wait until the scene 
is set to active before creating them (which may cause a load time or pop-in), or have them be a part of the scene ahead of time.

issues - I want to have a vp environment per-scene so I can load one while the other's being played, but 
I have to make the environment non-singleton to do that, and even then, objects created in one of the scenes are
placed in the active scene.

Can use VoxelPlay events defined in environment to efficiently/clearly wait for things to finish

the player exists on the square above the slope

issue - the character controller is integral to the way the first-person movement works, but it causes collisions in the other mode
- can remedy this by destroying the controller and recreating it, then refreshing with checkcharactercontroller
- can also change the class to not be so dependent on the character controller
- I think in the long-term, due to the need for 3 basic modes (1st person, 3rd person, and disembodied/edit mode) and voxel play's 
	lack of controller support, I will need my own 1st person camera with many of voxel play's features. but I don't want to get bogged
	down in that yet.

can add custom behavior to voxels by attaching a script that inherits from VoxelPlayInteractiveObject

consider using Rider from jetbrains, money permitting

can use ScriptableObject to create instances of a class in text form, which can be easily modified (HP, prefab, faction, etc)
can use CreateAssetMenu to create an instance of a scriptableobject quickly

can use singletons and donotdestroyonload to prevent key assets from getting destroyed on scene changes, like audio for example.

can use Action/Func to create events
- Events are useful when you need to decouple things, for example you can just emit a "wave" event and you don't need to 
specify what happens afterward specifically, other code can hook into the event without the "wave" logic needing to be changed.

delegates are just variables that hold methods.

could create objects that need to persist between scenes under a "dontdestroyonload" object

can use WaitWhile in a coroutine to listen for an event before continuing

try using getawaiter.getresult on tasks (they're like promises) in a non async function if you want to block on the result

can use FileManager.writetofile/loadfromfile to persist data to disk. can use jsonutility to serialize entire classes, like a 
class that holds all saveable information about the game

can store permanent files here - Path.Combine(Application.persistentDataPath, <file name>); File.WriteAllText(<path>, <string>);
File.readalltext()

can use JSON.Net if I have issues with jsonutility not serializing the types I want

vp environments are singletons by default. if I want to be able to switch between scenes quickly (without loading a vp environment)
I'll need to modify the source.

use CaveDefaultGenerator and other generators to create interesting details.

